f59aa875104efeda4f10a53fd3a80064ae356e75ce9358d448f4fdb3e3b75d63:{"__metadata":{"version":0.1},"root":{"steps":[{"step_id":"b6ad8310-d596-11ef-8049-23f959e660cb","step_position":[900,1040],"config_field_values":[],"task_id":"shopify::admin::order_created","task_version":"0.1","task_type":"TRIGGER","description":null,"note":null,"name":null},{"step_id":"c0e182f0-d596-11ef-8049-23f959e660cb","step_position":[1260,1040],"config_field_values":[{"config_field_id":"listpath","value":"order.lineItems"}],"task_id":"shopify::flow::foreach","task_version":"0.1","task_type":"FOREACH","description":null,"note":null,"name":null},{"step_id":"cb086370-d596-11ef-8049-23f959e660cb","step_position":[1620,1040],"config_field_values":[{"config_field_id":"input","value":"query{  \n  order{\n    id\n    name\n    lineItems{\n      name\n      product{\n        variants{\n          id\n          title\n          inventoryQuantity\n           inventoryItem {\n             id\n         }\n        }\n      }\n    }\n  }\n}"},{"config_field_id":"script","value":"export default function main({ order }) {\n  // Function to extract the date range from the line item name\n  function extractDateRange(lineItemName) {\n    const dateRangePattern = /\\b(January|February|March|April|May|June|July|August|September|October|November|December) \\d{1,2} - \\d{1,2}\\b/;\n    const match = lineItemName.match(dateRangePattern);\n    return match ? match[0] : \"No date range found\";\n  }\n\n  // Function to extract room type from the line item name\n  function extractRoomType(lineItemName) {\n    const match = lineItemName.match(/(Single|Double|Shared)/);\n    return match ? match[1] : '';\n  }\n\n  // Function to calculate inventory adjustment delta based on selected room type\n  function calculateDelta(variantType, selectedType) {\n    // If the variant is the selected type, no adjustment needed\n    if (variantType === selectedType) {\n      return 0;\n    }\n\n    // Logic for Single room selection\n    if (selectedType === 'Single') {\n      if (variantType === 'Double') return -1;\n      if (variantType === 'Shared') return -2;\n    }\n    \n    // Logic for Double room selection\n    if (selectedType === 'Double') {\n      if (variantType === 'Single') return -1;\n      if (variantType === 'Shared') return -2;\n    }\n    \n    // Logic for Shared room selection\n    if (selectedType === 'Shared') {\n      if (variantType === 'Single' || variantType === 'Double') return -1;\n    }\n\n    return 0;\n  }\n\n  let changes = [];\n\n  order.lineItems.forEach((lineItem) => {\n    const lineItemName = lineItem ? lineItem.name : \"\";\n    const dateRange = extractDateRange(lineItemName);\n    const selectedRoomType = extractRoomType(lineItemName);\n\n    // Get all matching variants with the date range\n    const matchingVariants = lineItem.product.variants.filter(variant => \n      variant.title.includes(dateRange)\n    );\n\n    // Process each variant for inventory adjustment\n    matchingVariants.forEach(variant => {\n      const variantRoomType = extractRoomType(variant.title);\n      const delta = calculateDelta(variantRoomType, selectedRoomType);\n\n      // Only add to changes if there's an actual adjustment needed\n      if (delta !== 0 && variant.inventoryItem?.id) {\n        changes.push({\n          delta: delta,\n          inventoryItemId: variant.inventoryItem.id,\n          locationId: \"gid://shopify/Location/91210744112\"\n        });\n      }\n    });\n  });\n\n  return {\n    message: `Order processed with ID: ${order.id}`,\n    orderId: order.id,\n    globalMutationInputString: JSON.stringify(changes)  // Return just the changes array\n  };\n}"},{"config_field_id":"output_schema","value":"\"The output of Run Code\"\ntype Output {\n  \"The message returned by the script\"\n  message: String!\n  globalMutationInputString:String\n}"}],"task_id":"shopify::flow::run_code","task_version":"0.1","task_type":"ACTION","description":null,"note":null,"name":"Run code"},{"step_id":"26a3c620-d597-11ef-8049-23f959e660cb","step_position":[1980,1040],"config_field_values":[{"config_field_id":"api_call","value":"{\"name\":\"inventoryAdjustQuantities\",\"blob\":\"{\\n  \\\"input\\\": {\\n    \\\"reason\\\": \\\"correction\\\",\\n    \\\"name\\\": \\\"available\\\",\\n    \\\"changes\\\": {{ runCode.globalMutationInputString }}\\n  }\\n}\\n\"}"}],"task_id":"shopify::admin::admin_api_operation","task_version":"0.1","task_type":"ACTION","description":null,"note":null,"name":"Send Admin API request"}],"links":[{"from_step_id":"b6ad8310-d596-11ef-8049-23f959e660cb","from_port_id":"output","to_step_id":"c0e182f0-d596-11ef-8049-23f959e660cb","to_port_id":"input"},{"from_step_id":"c0e182f0-d596-11ef-8049-23f959e660cb","from_port_id":"after","to_step_id":"cb086370-d596-11ef-8049-23f959e660cb","to_port_id":"input"},{"from_step_id":"cb086370-d596-11ef-8049-23f959e660cb","from_port_id":"output","to_step_id":"26a3c620-d597-11ef-8049-23f959e660cb","to_port_id":"input"}],"patched_fields":[{"id":"0bd0b560-d597-11ef-8049-23f959e660cb","handle":"newFlowSingleLine","field":"metafield","patched_type":"Order","arguments":"{\"key\":\"new_flow_single_line\",\"namespace\":\"custom\"}","merchant_configured":true}],"workflow_name":"Inventory Adjustment workflow"}}